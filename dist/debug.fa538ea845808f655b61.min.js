(()=>{"use strict";class e{constructor(e,s){if(e.length!=s.length)throw new Error("xValues and yValues rows must be of the same length.");this.xValues=e,this.yValues=s}size(){return this.xValues.length}getXValues(){return this.xValues}getYValues(){return this.yValues}}const s=new e(new Array(.1,.2,.3,.4,.5),new Array(1.25,2.38,3.79,5.44,7.14)),t=(new e(new Array(.15,.2,.33,.47,.62),new Array(1.25,2.38,3.79,5.44,7.14)),new e(new Array(1.1,1.25,1.4,1.55,1.7,1.85,2),new Array(.2234,1.2438,2.2644,3.2984,4.3222,5.3516,6.3867)),(new class{constructor(){this.xValues=[],this.yValues=[],this.n=0}calc(e,s){this.xValues=e.getXValues(),this.yValues=e.getYValues(),this.n=e.size();const t=s,r=this.xValues[1]-this.xValues[0],n=this.calcFiniteDifferences(this.n)[0];let l=1,a=0;for(let e=0;e<this.n;e++)a+=n[e]*l,l*=(t-this.xValues[e])/(r*(e+1));return a}calcFiniteDifferences(e){const s=new Array;s.push(this.yValues);for(let t=0;t<e;t++){const r=new Array;for(let n=0;n<e-t;n++)r.push(s[t][n+1]-s[t][n]);s.push(r)}const t=new Array;for(let r=0;r<e+1;r++){const n=new Array;for(let t=0;t<e-r+1;t++)n.push(s[t][r]);t.push(n)}return t}}).calc(s,.47));console.log("finiteDifNewtonMethodResult = ",t)})();